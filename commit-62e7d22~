From 62e7d2250bcfba0f148af93f0030cf03e3825c68 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Miodrag=20Popovi=C4=87?= <miodragpopovic@stcable.net>
Date: Sat, 13 Jul 2019 02:51:50 +0200
Subject: safeids based on kvsearch


diff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp
index 76c68d770..9c3e06b78 100644
--- a/src/rpc/blockchain.cpp
+++ b/src/rpc/blockchain.cpp
@@ -849,6 +849,8 @@ int32_t safecoin_safeids(uint8_t *safeids, int32_t height, int32_t width);
 
 std::vector<std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint32_t>>>> vt_safecoin_safeids(int32_t height, int32_t width);
 
+std::vector<std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint32_t>>>> vt_safecoin_safeids_new(int32_t height, int32_t width);
+
 int32_t safecoin_kvsearch(uint256 *refpubkeyp,int32_t current_height,uint32_t *flagsp,int32_t *heightp,uint8_t value[IGUANA_MAXSCRIPTSIZE],uint8_t *key,int32_t keylen);
 
 UniValue kvsearch(const UniValue& params, bool fHelp)
@@ -988,7 +990,8 @@ UniValue safeids(const UniValue& params, bool fHelp)
     }
     
 	UniValue uv_pubkeys(UniValue::VARR);
-	std::vector<std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint32_t>>>> vt = vt_safecoin_safeids(height, width);
+	//std::vector<std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint32_t>>>> vt = vt_safecoin_safeids(height, width);
+	std::vector<std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint32_t>>>> vt = vt_safecoin_safeids_new(height, width);
 	
 	if (vt.size() > 0)
 	{
diff --git a/src/safecoin_bitcoind.h b/src/safecoin_bitcoind.h
index c8e148cb7..a447a9e4c 100644
--- a/src/safecoin_bitcoind.h
+++ b/src/safecoin_bitcoind.h
@@ -25,6 +25,7 @@
 
 
 int32_t safecoin_notaries(uint8_t pubkeys[64][33],int32_t height,uint32_t timestamp);
+std::vector<std::string> vs_safecoin_notaries(int32_t height, uint32_t timestamp);
 int32_t safecoin_electednotary(int32_t *numnotariesp,uint8_t *pubkey33,int32_t height,uint32_t timestamp);
 unsigned int lwmaGetNextPOSRequired(const CBlockIndex* pindexLast, const Consensus::Params& params);
 
@@ -1124,6 +1125,118 @@ std::vector<std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint
 }
 
 
+// replacement for safecoin_safeids() - new one using kvsearch
+std::vector<std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint32_t>>>> vt_safecoin_safeids_new(int32_t height, int32_t width)
+{
+    int32_t i, j, nonz, block_height;
+        
+    CBlockIndex *pindex;
+    uint8_t pubkey33[33];
+    std::vector<std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint32_t>>>> vt;
+    std::vector<std::string> vs_pubkeys;
+    std::vector<uint32_t> vu_pubkey_blocks_count;
+    std::vector<std::vector<pair<std::string, uint32_t>>> vvp_pubkey_safeids;
+        
+    for (i = nonz = 0; i < width; i++)
+    {
+        if (height-i <= 0)
+            continue;
+        block_height = height - width + i + 1;
+        if ((pindex = safecoin_chainactive(block_height)) != 0) // to be sure it's a valid block_height
+        {
+			// loop through all notary pubkeys
+			std::vector<std::string> vs_all_pubkeys = vs_safecoin_notaries(block_height, 0);
+			
+			for (int j = 0; j < vs_all_pubkeys.size(); j++)
+			{
+				std::string s_current_pubkey = vs_all_pubkeys.at(j);
+				std::string s_current_block_height = ((block_height < 1000000)?"0":"") +  std::to_string(block_height);
+				std::string s_search_keyname = s_current_pubkey + s_current_block_height + "1";
+				
+				int32_t flags = 1, keylen;
+				uint8_t value[IGUANA_MAXSCRIPTSIZE*8];
+				uint256 pubs;
+				int32_t valuesize;
+				std::string keystr;
+				keylen = s_search_keyname.length();
+				uint8_t key[keylen];
+				int32_t heightp;
+				memcpy(key, s_search_keyname.c_str(), keylen);
+				
+				valuesize = safecoin_kvsearch((uint256 *)&pubs, height, (uint32_t *)&flags, (int32_t *)&heightp, (uint8_t *)&value, key, keylen);
+
+				if (valuesize > 0) // key name found
+				{
+					std::string s_safeid;
+					char *valuestr;
+					s_safeid.resize(valuesize);
+					valuestr = (char *)s_safeid.data();
+					memcpy (valuestr, value, valuesize);
+					
+					// we should store this safeid
+					std::vector<std::string>::iterator it;
+
+					// check if pubkey is already in the result list
+					it = std::find(vs_pubkeys.begin(), vs_pubkeys.end(), s_current_pubkey);
+					if (it != vs_pubkeys.end())
+					{
+						// found !
+						// get the element index
+						uint32_t index = std::distance(vs_pubkeys.begin(), it);
+						
+						// increase the block count
+						vu_pubkey_blocks_count.at(index) = vu_pubkey_blocks_count.at(index) + 1;
+						
+						// get this pubkey safeids
+						std::vector<pair<std::string, uint32_t>> vp_safeids = vvp_pubkey_safeids.at(index);
+						
+						// check if extracted safeid is already in the current pubkey safeids list
+						auto p = find_if(vp_safeids.begin(), vp_safeids.end(), [&s_safeid](const pair<string, uint32_t>& r){return r.first == s_safeid;});
+
+						if (p != vp_safeids.end())
+						{
+							// found safeid entry within current pubkey 
+							
+							// get the element index
+							uint32_t p_index = std::distance(vp_safeids.begin(), p);
+							
+							// // increase the safeid block count 
+							(vvp_pubkey_safeids.at(index)).at(p_index).second = vp_safeids.at(p_index).second + 1;
+						}
+						else
+						{
+							// not found, add safeid and block count of 1 to the current pubkey	
+							(vvp_pubkey_safeids.at(index)).push_back(std::make_pair(s_safeid, 1));
+						}
+					}
+					else
+					{
+						// not found
+						// insert both pubkey and safeid, block counts of 1
+						vs_pubkeys.push_back(s_current_pubkey);
+						vu_pubkey_blocks_count.push_back(1);
+						std::vector<pair<std::string, uint32_t>> vp_init_safeid;
+						vp_init_safeid.push_back(std::make_pair(s_safeid, 1));
+						vvp_pubkey_safeids.push_back(vp_init_safeid);
+					}
+				}	
+			}
+        }
+    }
+    
+    // join pubkeys and safeids in result tuple
+    for (unsigned k = 0; k < vs_pubkeys.size(); k++)
+    {
+		std::tuple<std::string, uint32_t, std::vector<pair<std::string, uint32_t>>> tup;
+		std::get<0>(tup) = vs_pubkeys.at(k);
+		std::get<1>(tup) = vu_pubkey_blocks_count.at(k);
+		std::get<2>(tup) = vvp_pubkey_safeids.at(k);
+		vt.push_back(tup);
+	}
+    return vt;
+}
+
+
 int32_t safecoin_is_special(uint8_t pubkeys[66][33],int32_t mids[66],uint32_t blocktimes[66],int32_t height,uint8_t pubkey33[33],uint32_t blocktime)
 {
     int32_t i,j,notaryid=0,minerid,limit,nid; uint8_t destpubkey33[33];
